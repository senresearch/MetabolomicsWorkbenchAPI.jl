var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"CurrentModule = MetabolomicsWorkbenchAPI","category":"page"},{"location":"functions/#Index","page":"Functions","title":"Index","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"functions/#Description","page":"Functions","title":"Description","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [MetabolomicsWorkbenchAPI]","category":"page"},{"location":"functions/#MetabolomicsWorkbenchAPI.build_df_data-Tuple{Vector{DataFrames.DataFrame}}","page":"Functions","title":"MetabolomicsWorkbenchAPI.build_df_data","text":"build_df_data(vDF::Vector{DataFrame}) => DataFrame\n\nIt checks all samples and includes all the variables names. If a sample misses one or more variable, it generates the missing entries for all variables. It returns a dataframe.   \n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.check_mw","page":"Functions","title":"MetabolomicsWorkbenchAPI.check_mw","text":"check_mw(url::AbstractString) => String\n\nChecks if Metabolomics Workbench server is responding properly. Returns the HTTP status code (200 if successful) and prints a message.\n\nExample\n\njulia> check_mw()\nMetabolomicsWorkbench.org is alive.\n200\n\n\n\n\n\n","category":"function"},{"location":"functions/#MetabolomicsWorkbenchAPI.fetch_data-Tuple{String}","page":"Functions","title":"MetabolomicsWorkbenchAPI.fetch_data","text":"fetch_data(studyname::String) => DataFrame\n\nReturn the metabolite data of the study as a dataframe.  \n\nExample:\n\njulia> df = fetch_data(\"ST001710\");\njulia> df[1:5,1:3]\n5×3 DataFrame\n Row │ Metabolite           1022385746  1022385747 \n     │ String               String      String     \n─────┼─────────────────────────────────────────────\n   1 │ CE(16:0) + CE(18:1)  0.1062      -1.9080\n   2 │ CE(18:0)             0.2580      0.2774\n   3 │ CE(18:2)             1.0654      0.1419\n   4 │ CE(20:4)             0.7983      -0.3442\n   5 │ Cer(d18:1/23:0)      1.2658      0.9246\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.fetch_metabolites-Tuple{String}","page":"Functions","title":"MetabolomicsWorkbenchAPI.fetch_metabolites","text":"fetch_metabolites(studyname::String) => DataFrame\n\nReturn the dataframe of the metabolites' attributes of the study.  \n\nExample:\n\njulia> df = fetch_metabolites(\"ST001710\");\njulia> df[1:5,1:3]\n5×10 DataFrame\n Row │ Metabolite           pubchem_id  inchi_key  kegg_id  other_id  other_id_type  ri      ri_type  moverz_quant\n     │ String               String      String     String   String    String         String  String   String            String \n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ CE(16:0) + CE(18:1)                                                           9.12             369.351948452576\n   2 │ CE(18:0)                                                                      9.64             369.351943579901\n   3 │ CE(18:2)                                                                      8.71             369.351905113834\n   4 │ CE(20:4)                                                                      8.48             369.351992746797\n   5 │ Cer(d18:1/23:0)                                                               7.78             636.630358494506\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.fetch_properties-Tuple{Vector{String}}","page":"Functions","title":"MetabolomicsWorkbenchAPI.fetch_properties","text":"fetch_properties(metabolite_names::Vector{String}) => DataFrame\n\nReturns a data frame with the following information:  exact mass, formula, main class, refmet name, sub class, super class. \n\nExample:\n\njulia> vNames = [\"LPC(16:0p)\", \"PC(18:0p/18:1(9Z))\", \"CE(18:0)\", \"PC(O-32:1)\", \"TG(O-52:2)\"];\njulia> fetch_properties(vNames)\n5×6 DataFrame\n Row │ exactmass  formula     main_class              refmet_name         sub_class     super_class\n     │ String?    String?     String                  String                String        String\n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 479.3376   C24H50NO6P  Glycerophosphocholines  LPC P-16:0            O-LPC         Glycerophospholipids\n   2 │ missing    missing     Glycerophosphocholines  PC  P-18:0/18:1(9Z)*  PC            Glycerophospholipids\n   3 │ 652.6158   C45H80O2    Sterol esters           CE 18:0               Chol. esters  Sterol Lipids\n   4 │ 717.5672   C40H80NO7P  Glycerophosphocholines  PC O-32:1             O-PC          Glycerophospholipids\n   5 │ missing    missing     Triradylglycerols       TG  O-52:2*           O-TAG         Glycerolipids\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.fetch_samples-Tuple{String}","page":"Functions","title":"MetabolomicsWorkbenchAPI.fetch_samples","text":"fetch_samples(studyname::String) => DataFrame\n\nReturn the samples dataframe of the study.  \n\nExample:\n\njulia> fetch_samples(\"ST001710\")\n627×15 DataFrame\n Row │ Sample ID   Data type         NAFLD.Category  T2DM    Kleiner.Steatosis  Inflammation  Sex     Sample_Data:Ballooning  Kleiner.Fibrosis  NAS     Platelets.E10-9.per.L  Liver.ALT  Liver.AST  AST.ALT.Ratio       ⋯     │ String      String            String          String  String             String        String  String                  String            String  String                 String     String     String              ⋯─────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────   1 │ 1022385746  Serum lipidomics  1               NA      1                  -             NA      -                       -                 1       235                    173        248        1.43352601156069    ⋯   2 │ 1022385747  Serum lipidomics  1               NA      1                  1             NA      -                       -                 2       278                    38         41         1.07894736842105     \n   3 │ 1022385761  Serum lipidomics  1               NA      1                  1             NA      -                       -                 2       246                    22         27         1.22727272727273     \n   4 │ 1022385792  Serum lipidomics  1               NA      1                  3             NA      -                       1c                3       283                    20         18         0.9\n   5 │ 1022385816  Serum lipidomics  1               NA      2                  1             NA      -                       -                 3       280                    NA         NA         NA                  ⋯   6 │ 1022385825  Serum lipidomics  1               NA      2                  1             NA      -                       NA                3       252                    116        69         0.594827586206897    \n  ⋮  ⋮              ⋮                ⋮           ⋮             ⋮               ⋮          ⋮               ⋮                    ⋮            ⋮               ⋮                ⋮          ⋮              ⋮           ⋱ 622 │ 1022386897  Serum lipidomics  NA              Y       NA                 NA            NA      NA                      NA                NA      267                    32         32         1\n 623 │ 1026694057  Serum lipidomics  -               N       -                  -             NA      -                       -                 -       NA                     27         21         0.777777777777778    \n 624 │ 1028937993  Serum lipidomics  -               N       -                  -             NA      NA                      -                 NA      NA                     26         27         1.03846153846154    ⋯ 625 │ 1028939944  Serum lipidomics  -               N       -                  -             NA      -                       -                 -       187                    29         26         0.896551724137931    \n 626 │ 1026694049  Serum lipidomics  -               Y       -                  -             NA      -                       -                 -       NA                     18         20         1.11111111111111     \n 627 │ 1022385827  Serum lipidomics  1               NA      1                  1             NA      -                       -                 2       NA                     35         22         0.628571428571429                                                                                                                                                \n                                                                                                                                                                                            5 columns and 615 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.fetch_study_info-Tuple{String}","page":"Functions","title":"MetabolomicsWorkbenchAPI.fetch_study_info","text":"fetch_study_info(studyname::String) => DataFrame\n\nReturns a dataframe containing the available study information such as the study title, summary, institute name, total number of subjects and much more.\n\nExample:\n\njulia> df = fetch_study_info(\"ST000001\");\njulia> select(dftest, [:STUDY_TITLE, :INSTITUTE])\n1×2 DataFrame\n Row │ STUDY_TITLE                        INSTITUTE\n     │ String                             String\n─────┼────────────────────────────────────────────────────────────────────\n   1 │ Fatb Induction Experiment (FatBI…  University of California, Davis                                                                                                                                                                                5 columns and 615 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.fetch_total_subjects-Tuple{String}","page":"Functions","title":"MetabolomicsWorkbenchAPI.fetch_total_subjects","text":"fetch_total_subjects(studyname::String) => Integer\n\nReturn the total number of subjects of the study.  \n\nExample:\n\njulia> fetch_total_subjects(\"ST001052\")\n51                                                                                                                                                                                5 columns and 615 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.filt_json-Tuple{String}","page":"Functions","title":"MetabolomicsWorkbenchAPI.filt_json","text":"filt_json(s::String) => String\n\nRemove any text before the first '{' in a string.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.fix_unbalanced_name-Tuple{String}","page":"Functions","title":"MetabolomicsWorkbenchAPI.fix_unbalanced_name","text":"fix_unbalanced_name(s::String) => String\n\nRecursive function that fixes unbalanced parentheses in a string, and returns balanced string.\n\nExample:\n\njulia> my_s = \"DG(18:1(/1(8:1)\";  \njulia> fix_unbalanced_name(my_s) \n\"DG(18:1/18:1)\"  \njulia> my_s = \"DG(18:1/18:1))\";\njulia> fix_unbalanced_name(my_s) \n\"DG(18:1/18:1)\" \njulia> my_s = \"DG(((((18:1/18:1))\";\njulia> fix_unbalanced_name(my_s) \n\"DG((18:1/18:1))\" \n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.get_output-Tuple{String}","page":"Functions","title":"MetabolomicsWorkbenchAPI.get_output","text":"get_output(url::String) => String\n\nGets output body from a URL.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.get_variables_names-Tuple{Vector{DataFrames.DataFrame}}","page":"Functions","title":"MetabolomicsWorkbenchAPI.get_variables_names","text":"get_variable_names(vDF::Vector{DataFrame}) => Vector{String}\n\nReturn the union variable names of all samples as a vector of String.   \n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.json2df-Tuple{String}","page":"Functions","title":"MetabolomicsWorkbenchAPI.json2df","text":"json2df(s) => DataFrame\n\nConverts a string from a single JSON entry into a dataframe.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.mw_match-Tuple{String}","page":"Functions","title":"MetabolomicsWorkbenchAPI.mw_match","text":"mw_match(metabolite_name::String) => DataFrame\n\nStandardize metabolite name or PubChem/KEGG/HMDB/ChEBI/LIPID MAPS identifier to RefMet, and fetch  refmet name, formula, exact mass, super class, main class, sub class.\n\nDetails:\n\nThe “match” input item performs a search against a customized synonym table in the database. The submitted synonyms are matched in a ‘fuzzy’ manner by dropping the following types of characters from the specified input value: <space>+-/(){}[]*\";@. In addition, some common ion adduct suffixes (e.g. [M+H]+) are removed. The output item is ignored and the following output information is retrieved: refmetname, formula, exact mass, main class, sub class.\n\nhttps://www.metabolomicsworkbench.org/tools/MWRestAPIv1.0.pdf\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.mw_mwtab-Tuple{String}","page":"Functions","title":"MetabolomicsWorkbenchAPI.mw_mwtab","text":"mw_mwtab(studyname::String; format = \"json\") => String\n\nFetch the mwtab output for a study in json (default) or txt format.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.mw_url-Tuple{}","page":"Functions","title":"MetabolomicsWorkbenchAPI.mw_url","text":"mw_url() => String\n\nReturns the default Metabolomics Workbench REST API URL.\n\nExample\n\njulia> mw_url()\n\"https://www.metabolomicsworkbench.org/\"\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.parse_json-Tuple{String}","page":"Functions","title":"MetabolomicsWorkbenchAPI.parse_json","text":"parse_json(s) => JSON3.Object\n\nRead JSON.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetabolomicsWorkbenchAPI.url2df-Tuple{String}","page":"Functions","title":"MetabolomicsWorkbenchAPI.url2df","text":"url2df(url::String) => DataFrame\n\nGets the response from REST URL and converts a single JSON entry to dataframe\n\n\n\n\n\n","category":"method"},{"location":"#MetabolomicsWorkbenchAPI.jl","page":"Overview","title":"MetabolomicsWorkbenchAPI.jl","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"The Metabolomics Workbench operates as an international repository for metabolomics data and metadata while delivering analysis tools and access to metabolite standards, protocols, and more. The Metabolomics Workbench was developed by the Metabolomics Common Fund's National Metabolomics Data Repository(NMDR) to support the development of next-generation technologies, increase the inventory and availability of high-quality reference standards, and facilitate data sharing and collaboration.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"MetabolomicsWorkbenchAPI.jl is a Julia package to work with Metabolomics Workbench REST service. The official MW REST API documentation can be downloaded here. Several request examples of REST urls are presented in the Metabolomics WorkBench REST service web page that includes an interactive \"REST url\" creator. The current  MetabolomicsWorkbenchAPI.jl version provides only access to the database but not to the analysis functions.","category":"page"},{"location":"#Check-connection","page":"Overview","title":"Check connection","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"To check if the website is responding properly:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"julia> check_mw()\nMetabolomicsWorkbench.org is alive.\n200","category":"page"},{"location":"#Get-Metabolites-Properties","page":"Overview","title":"Get Metabolites Properties","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"To get properties for a list of metabolites names.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"julia> vNames = [\"LPC(16:0p)\", \"PC(18:0p/18:1(9Z))\", \"CE(18:0)\", \"PC(O-32:1)\", \"TG(O-52:2)\"];\njulia> fetch_properties(vNames)\n5×6 DataFrame\n Row │ exactmass  formula     main_class              refmet_name         sub_class     super_class\n     │ String?    String?     String                  String                String        String\n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 479.3376   C24H50NO6P  Glycerophosphocholines  LPC P-16:0            O-LPC         Glycerophospholipids\n   2 │ missing    missing     Glycerophosphocholines  PC  P-18:0/18:1(9Z)*  PC            Glycerophospholipids\n   3 │ 652.6158   C45H80O2    Sterol esters           CE 18:0               Chol. esters  Sterol Lipids\n   4 │ 717.5672   C40H80NO7P  Glycerophosphocholines  PC O-32:1             O-PC          Glycerophospholipids\n   5 │ missing    missing     Triradylglycerols       TG  O-52:2*           O-TAG         Glycerolipids","category":"page"},{"location":"#Get-metabolites-Data","page":"Overview","title":"Get metabolites Data","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"To get metabolites data for a study.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"julia> df = fetch_data(\"ST001710\");\njulia> df[1:5,1:3]\n5×3 DataFrame\n Row │ Metabolite           1022385746  1022385747 \n     │ String               String      String     \n─────┼─────────────────────────────────────────────\n   1 │ CE(16:0) + CE(18:1)  0.1062      -1.9080\n   2 │ CE(18:0)             0.2580      0.2774\n   3 │ CE(18:2)             1.0654      0.1419\n   4 │ CE(20:4)             0.7983      -0.3442\n   5 │ Cer(d18:1/23:0)      1.2658      0.9246","category":"page"},{"location":"#Get-metabolites","page":"Overview","title":"Get metabolites","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"To get the list of metabolites for a study.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"julia> df = fetch_metabolites(\"ST000001\");\njulia> select(df, Not([\"inchi_key\", \"other_id_type\"]))[1:5,:]\n5×7 DataFrame\n Row │ Metabolite               moverz_quant  ri      ri_type  pubchem_id  kegg_id  other_id \n     │ String                   String        String  String   String      String   String   \n─────┼───────────────────────────────────────────────────────────────────────────────────────\n   1 │ 1,2,4-benzenetriol       239           522741  Fiehn    10787       C02814   205673\n   2 │ 1-monostearin            399           959625  Fiehn    107036      D01947   202835\n   3 │ 2-hydroxyvaleric acid    131           310750  Fiehn    98009                218773\n   4 │ 3-phosphoglycerate       299           611619  Fiehn    724         C00597   217821\n   5 │ 5-hydroxynorvaline NIST  142           494838  Fiehn    95562                200384","category":"page"},{"location":"#Get-Samples-variables","page":"Overview","title":"Get Samples variables","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"To get samples and experimental variables for a study.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"julia> df = fetch_samples(\"ST000001\");\njulia> first(df, 3)\n3×3 DataFrame\n Row │ Sample ID    Arabidopsis Genotype  Plant Wounding Treatment \n     │ String       String                String\n─────┼─────────────────────────────────────────────────────────────\n   1 │ LabF_115873  Wassilewskija (Ws)    Control - Non-Wounded\n   2 │ LabF_115878  Wassilewskija (Ws)    Control - Non-Wounded\n   3 │ LabF_115883  Wassilewskija (Ws)    Control - Non-Wounded\n","category":"page"}]
}
